// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	crmUsersFieldNames          = builder.RawFieldNames(&CrmUsers{})
	crmUsersRows                = strings.Join(crmUsersFieldNames, ",")
	crmUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(crmUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	crmUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(crmUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	crmUsersModel interface {
		Insert(ctx context.Context, data *CrmUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CrmUsers, error)
		Update(ctx context.Context, data *CrmUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCrmUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CrmUsers struct {
		Id         int64          `db:"id"`
		Name       sql.NullString `db:"name"`     // 姓名
		Email      sql.NullString `db:"email"`    // 邮箱
		Phone      sql.NullString `db:"phone"`    // 积分
		Level      sql.NullInt64  `db:"level"`    // 用户等级
		RoleIds    sql.NullString `db:"role_ids"` // 角色
		CreateTime sql.NullTime   `db:"create_time"`
		UpdateTime sql.NullTime   `db:"update_time"`
	}
)

func newCrmUsersModel(conn sqlx.SqlConn) *defaultCrmUsersModel {
	return &defaultCrmUsersModel{
		conn:  conn,
		table: "`crm_users`",
	}
}

func (m *defaultCrmUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCrmUsersModel) FindOne(ctx context.Context, id int64) (*CrmUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", crmUsersRows, m.table)
	var resp CrmUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrmUsersModel) Insert(ctx context.Context, data *CrmUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, crmUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Email, data.Phone, data.Level, data.RoleIds)
	return ret, err
}

func (m *defaultCrmUsersModel) Update(ctx context.Context, data *CrmUsers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, crmUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Email, data.Phone, data.Level, data.RoleIds, data.Id)
	return err
}

func (m *defaultCrmUsersModel) tableName() string {
	return m.table
}
