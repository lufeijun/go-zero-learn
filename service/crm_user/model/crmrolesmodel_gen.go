// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	crmRolesFieldNames          = builder.RawFieldNames(&CrmRoles{})
	crmRolesRows                = strings.Join(crmRolesFieldNames, ",")
	crmRolesRowsExpectAutoSet   = strings.Join(stringx.Remove(crmRolesFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	crmRolesRowsWithPlaceHolder = strings.Join(stringx.Remove(crmRolesFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	crmRolesModel interface {
		Insert(ctx context.Context, data *CrmRoles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CrmRoles, error)
		Update(ctx context.Context, data *CrmRoles) error
		UpdateEnable(ctx context.Context, id int64 , is_enable int64) error
		Delete(ctx context.Context, id int64) error
		IshaveByName(ctx context.Context, name string,level int64) (bool,error)
		Detail(ctx context.Context,id int64) (DetailWithChilds,error)
	}

	defaultCrmRolesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CrmRoles struct {
		Id       int64          `db:"id"`
		Name     string         `db:"name"`
		IsEnable int64				  `db:"is_enable"`
		Level    int64				  `db:"level"`
		ParentId int64				  `db:"parent_id"`
		CreateAt string			 	  `db:"create_at"`
		UpdateAt string			    `db:"update_at"`
	}

	DetailWithChilds struct {
		Id       int64
		Name     string
		IsEnable int64
		Level    int64
		ParentId int64
		CreateAt string
		UpdateAt string
		Childs   []CrmRoles
	}

)

func newCrmRolesModel(conn sqlx.SqlConn) *defaultCrmRolesModel {
	return &defaultCrmRolesModel{
		conn:  conn,
		table: "`crm_roles`",
	}
}

func (m *defaultCrmRolesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCrmRolesModel) FindOne(ctx context.Context, id int64) (*CrmRoles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", crmRolesRows, m.table)
	var resp CrmRoles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCrmRolesModel) Insert(ctx context.Context, data *CrmRoles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, crmRolesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.IsEnable, data.Level, data.ParentId, data.CreateAt, data.UpdateAt)
	return ret, err
}

func (m *defaultCrmRolesModel) Update(ctx context.Context, data *CrmRoles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, crmRolesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.IsEnable, data.Level, data.ParentId, data.CreateAt, data.UpdateAt, data.Id)
	return err
}

func (m *defaultCrmRolesModel) UpdateEnable(ctx context.Context, id int64 , is_enable int64) error {
	query := fmt.Sprintf("update %s set is_enable = ? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query , is_enable , id)
	return err
}

func (m *defaultCrmRolesModel) IshaveByName(ctx context.Context, name string, level int64) (bool,error) {
	// query := fmt.Sprintf("select id from %s where `name` = ? limit 1 ", m.table)
	query := fmt.Sprintf("select count(*) from %s where `name` = ? and level = ?", m.table)
	var resp int64
	err := m.conn.QueryRowCtx(ctx, &resp, query, name , level)
	return resp > 0, err
}


func (m *defaultCrmRolesModel) Detail(ctx context.Context, id int64) (DetailWithChilds,error) {
	var result DetailWithChilds

	query := fmt.Sprintf("select * from %s where id = ?", m.table)
	var resp CrmRoles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	if err != nil {
		if err == ErrNotFound {
			return  result, errors.New("未找到对应记录")
		}
		return result, errors.New("查询失败")
	}

	// 赋值
	result.Id  = resp.Id
	result.Name = resp.Name
	result.IsEnable = resp.IsEnable
	result.ParentId = resp.ParentId
	result.CreateAt = resp.CreateAt
	result.UpdateAt = resp.UpdateAt

	var resps []CrmRoles
	query1 := fmt.Sprintf("select * from %s where parent_id = ?", m.table)
	err = m.conn.QueryRowsCtx(ctx, &resps, query1, id)
	if err == nil {
		result.Childs = resps
	}

	return result,err
}

func (m *defaultCrmRolesModel) tableName() string {
	return m.table
}
